"use strict";var _runtime=require("regenerator/runtime"),_runtime2=_interopRequireDefault(_runtime),_assert=require("assert"),_assert2=_interopRequireDefault(_assert),_es6Promise=require("es6-promise");function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}function _asyncToGenerator(e){return function(){var i=e.apply(this,arguments);return new _es6Promise.Promise(function(o,s){return function t(e,r){try{var n=i[e](r),a=n.value}catch(e){return void s(e)}if(!n.done)return _es6Promise.Promise.resolve(a).then(function(e){t("next",e)},function(e){t("throw",e)});o(a)}("next")})}}self.Promise=_es6Promise.Promise,describe("idb interface",function(){beforeEach(function(e){return idb.delete("tmp-db").then(e)}),it("exists on window",function(){(0,_assert2.default)("idb"in self)}),it("has open and delete methods",function(){(0,_assert2.default)("open"in idb),(0,_assert2.default)("delete"in idb)}),it("stuff",_asyncToGenerator(_runtime2.default.mark(function e(){var t,r,n;return _runtime2.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,idb.open("tmp-db",1,function(e){switch(e.oldVersion){case 0:e.createObjectStore("key-val").put("world","hello")}});case 2:return t=e.sent,r=t.transaction("key-val","readwrite"),n=r.objectStore("key-val"),e.t0=n,e.next=8,n.get("hello");case 8:return e.t1=e.sent,e.t0.put.call(e.t0,e.t1,"foo"),e.next=12,r.complete;case 12:return r=t.transaction("key-val"),e.t2=_assert2.default,e.next=16,r.objectStore("key-val").get("foo");case 16:e.t3=e.sent,e.t2.equal.call(e.t2,e.t3,"world"),t.close();case 19:case"end":return e.stop()}},e,void 0)}))),it("lets me itterate over a cursor",_asyncToGenerator(_runtime2.default.mark(function e(){var t,r,n;return _runtime2.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,idb.open("tmp-db",1,function(e){switch(e.oldVersion){case 0:var t=e.createObjectStore("list",{keyPath:""});t.put("a"),t.put("b"),t.put("c"),t.put("d"),t.put("e")}});case 2:return t=e.sent,r=t.transaction("list"),n=[],r.objectStore("list").iterateCursor(function(e){e&&(n.push(e.value),e.continue())}),e.next=8,r.complete;case 8:_assert2.default.equal(n.join(),"a,b,c,d,e"),t.close();case 10:case"end":return e.stop()}},e,void 0)}))),it("rejects rather than throws",_asyncToGenerator(_runtime2.default.mark(function e(){var t,r,n,a,o,s;return _runtime2.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,idb.open("tmp-db",1,function(e){e.createObjectStore("key-val")});case 2:return t=e.sent,n=r=!1,a=t.transaction("key-val"),o=a.objectStore("key-val"),s=void 0,e.next=10,a.complete;case 10:try{s=o.get("hello").catch(function(e){return n=!0})}catch(e){r=!0}return e.next=13,s;case 13:(0,_assert2.default)(!r,"Did not throw"),(0,_assert2.default)(n,"Rejected");case 15:case"end":return e.stop()}},e,void 0)})))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlkYi90ZXN0L2lkYi5qcyJdLCJuYW1lcyI6WyJfcnVudGltZSIsInJlcXVpcmUiLCJfYXNzZXJ0IiwiX2VzNlByb21pc2UiLCJzZWxmIiwiUHJvbWlzZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImRvbmUiLCJpZGIiLCJkZWxldGUiLCJ0aGVuIiwiaXQiLCJfYXNzZXJ0MiIsImRlZmF1bHQiLCJfY2FsbGVlIiwiZGIiLCJ0eCIsInN0b3JlIiwiX3J1bnRpbWUyIiwid3JhcCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJvcGVuIiwidXBncmFkZURiIiwib2xkVmVyc2lvbiIsImNyZWF0ZU9iamVjdFN0b3JlIiwicHV0Iiwic2VudCIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJ0MCIsImdldCIsInQxIiwiY2FsbCIsImNvbXBsZXRlIiwidDIiLCJhc3NlcnQiLCJ0MyIsImVxdWFsIiwiY2xvc2UiLCJzdG9wIiwidW5kZWZpbmVkIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJtYXJrIiwia2V5UGF0aCIsInZhbHVlcyIsIml0ZXJhdGVDdXJzb3IiLCJjdXJzb3IiLCJwdXNoIiwidmFsdWUiLCJjb250aW51ZSIsImpvaW4iLCJfY2FsbGVlMyIsInRocmV3IiwicmVqZWN0ZWQiLCJnZXRQcm9taXNlIiwiX2NvbnRleHQzIiwiY2F0Y2giLCJfIiwiZSJdLCJtYXBwaW5ncyI6ImFBQUEsSUFBQUEsU0FBQUMsUUFBQSxrRUFDQUMsUUFBQUQsUUFBQSxtREFEQUUsWUFBQUYsUUFBQSwwWkFJQUcsS0FBS0MsUUFBVUEsWUFBQUEsUUFIZkMsU0FBQSxnQkFBQSxXQU1FQyxXQUFXLFNBQUFDLEdBQUEsT0FBUUMsSUFBSUMsT0FBTyxVQUFVQyxLQUFLSCxLQUU3Q0ksR0FBRyxtQkFBb0IsWUFQekIsRUFBQUMsU0FBQUMsU0FBQSxRQUFBVixRQVdFUSxHQUFHLDhCQUErQixZQUNoQyxFQUFBQyxTQUFBQyxTQUFPLFNBQVVMLE1BQ2pCLEVBQUFJLFNBQUFDLFNB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QyxFQUFBN0IsS0FsRHJCMkIsRUFBQUQsR0FBQSxFQXlESnRDLEVBQUtELEVBQUdjLFlBQVksV0F6RGhCWixFQUFBRCxFQUFBYyxZQUFBLFdBMkROMEIsT0FUMkIsRUFBQUMsRUFBQW5DLEtBQUEsR0EvQi9CUCxFQUFBQSxTQStCK0IsS0FBQSxHQWxEckIsSUFBQXlDLEVBQUF2QyxFQUFBZSxJQUFBLFNBQUEwQixNQUFBLFNBQUFDLEdBQUEsT0FBQUosR0FBQSxJQUFBLE1BQUFLLEdBQUFOLEdBQUEsRUFrRHFCLE9BQUFHLEVBQUFuQyxLQUFBLEdBbERqQ2tDLEVBa0RpQyxLQUFBLElBNUJqQzdDLEVBQUFBLFNBQUFBLFVBQUcyQyxFQUFBLGtCQUFrQyxFQUFBMUMsU0FBQUMsU0FBQTBDLEVBQUEsWUE0QkosS0FBQSxHQUFBLElBQUEsTUFBQSxPQUFBRSxFQUFBaEIsU0FBQVksT0FBQVgiLCJmaWxlIjoiaWRiL3Rlc3QvaWRiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZ2VuZXJhdG9yUnVudGltZSBmcm9tIFwicmVnZW5lcmF0b3IvcnVudGltZVwiO1xuaW1wb3J0IGFzc2VydCBmcm9tIFwiYXNzZXJ0XCI7XG5pbXBvcnQge1Byb21pc2V9IGZyb20gXCJlczYtcHJvbWlzZVwiO1xuXG5zZWxmLlByb21pc2UgPSBQcm9taXNlO1xuXG5kZXNjcmliZSgnaWRiIGludGVyZmFjZScsICgpID0+IHtcbiAgYmVmb3JlRWFjaChkb25lID0+IGlkYi5kZWxldGUoJ3RtcC1kYicpLnRoZW4oZG9uZSkpO1xuXG4gIGl0KCdleGlzdHMgb24gd2luZG93JywgKCkgPT4ge1xuICAgIGFzc2VydCgnaWRiJyBpbiBzZWxmKTtcbiAgfSk7XG5cbiAgaXQoJ2hhcyBvcGVuIGFuZCBkZWxldGUgbWV0aG9kcycsICgpID0+IHtcbiAgICBhc3NlcnQoJ29wZW4nIGluIGlkYik7XG4gICAgYXNzZXJ0KCdkZWxldGUnIGluIGlkYik7XG4gIH0pO1xuXG4gIC8vIHllYWggeWVhaCwgSSBrbm93LCBJIG5lZWQgdG8gd3JpdGUgYmV0dGVyIHRlc3RzXG4gIGl0KCdzdHVmZicsIGFzeW5jICgpID0+IHtcbiAgICAvLyBPcGVuIHRoZSBkYXRhYmFzZVxuICAgIGxldCBkYiA9IGF3YWl0IGlkYi5vcGVuKCd0bXAtZGInLCAxLCB1cGdyYWRlRGIgPT4ge1xuICAgICAgc3dpdGNoICh1cGdyYWRlRGIub2xkVmVyc2lvbikge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgdXBncmFkZURiLmNyZWF0ZU9iamVjdFN0b3JlKCdrZXktdmFsJykucHV0KCd3b3JsZCcsICdoZWxsbycpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQWRkIHNvbWUgdGhpbmdzIHRvIHRoZSBsaXN0XG4gICAgbGV0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2tleS12YWwnLCAncmVhZHdyaXRlJyk7XG4gICAgbGV0IHN0b3JlID0gdHgub2JqZWN0U3RvcmUoJ2tleS12YWwnKTtcbiAgICBcbiAgICBzdG9yZS5wdXQoYXdhaXQgc3RvcmUuZ2V0KCdoZWxsbycpLCAnZm9vJyk7XG4gICAgYXdhaXQgdHguY29tcGxldGU7XG5cbiAgICB0eCA9IGRiLnRyYW5zYWN0aW9uKCdrZXktdmFsJyk7XG5cbiAgICBhc3NlcnQuZXF1YWwoYXdhaXQgdHgub2JqZWN0U3RvcmUoJ2tleS12YWwnKS5nZXQoJ2ZvbycpLCAnd29ybGQnKTtcbiAgICBkYi5jbG9zZSgpO1xuICB9KTtcblxuICBpdCgnbGV0cyBtZSBpdHRlcmF0ZSBvdmVyIGEgY3Vyc29yJywgYXN5bmMgKCkgPT4ge1xuICAgIC8vIE9wZW4gdGhlIGRhdGFiYXNlXG4gICAgbGV0IGRiID0gYXdhaXQgaWRiLm9wZW4oJ3RtcC1kYicsIDEsIHVwZ3JhZGVEYiA9PiB7XG4gICAgICBzd2l0Y2ggKHVwZ3JhZGVEYi5vbGRWZXJzaW9uKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjb25zdCBzdG9yZSA9IHVwZ3JhZGVEYi5jcmVhdGVPYmplY3RTdG9yZSgnbGlzdCcsIHtrZXlQYXRoOiAnJ30pO1xuICAgICAgICAgIHN0b3JlLnB1dChcImFcIik7XG4gICAgICAgICAgc3RvcmUucHV0KFwiYlwiKTtcbiAgICAgICAgICBzdG9yZS5wdXQoXCJjXCIpO1xuICAgICAgICAgIHN0b3JlLnB1dChcImRcIik7XG4gICAgICAgICAgc3RvcmUucHV0KFwiZVwiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2xpc3QnKTtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcblxuICAgIHR4Lm9iamVjdFN0b3JlKCdsaXN0JykuaXRlcmF0ZUN1cnNvcihjdXJzb3IgPT4ge1xuICAgICAgaWYgKCFjdXJzb3IpIHJldHVybjtcbiAgICAgIHZhbHVlcy5wdXNoKGN1cnNvci52YWx1ZSk7XG4gICAgICBjdXJzb3IuY29udGludWUoKTtcbiAgICB9KTtcblxuICAgIGF3YWl0IHR4LmNvbXBsZXRlO1xuICAgIGFzc2VydC5lcXVhbCh2YWx1ZXMuam9pbigpLCAnYSxiLGMsZCxlJyk7XG4gICAgZGIuY2xvc2UoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlamVjdHMgcmF0aGVyIHRoYW4gdGhyb3dzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGRiID0gYXdhaXQgaWRiLm9wZW4oJ3RtcC1kYicsIDEsIHVwZ3JhZGVEYiA9PiB7XG4gICAgICB1cGdyYWRlRGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2tleS12YWwnKTtcbiAgICB9KTtcblxuICAgIGxldCB0aHJldyA9IGZhbHNlO1xuICAgIGxldCByZWplY3RlZCA9IGZhbHNlO1xuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oJ2tleS12YWwnKTtcbiAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKCdrZXktdmFsJyk7XG4gICAgbGV0IGdldFByb21pc2U7XG4gICAgYXdhaXQgdHguY29tcGxldGU7XG5cbiAgICB0cnkge1xuICAgICAgZ2V0UHJvbWlzZSA9IHN0b3JlLmdldCgnaGVsbG8nKS5jYXRjaChfID0+IHJlamVjdGVkID0gdHJ1ZSk7XG4gICAgfSBjYXRjaChlKSB7XG4gICAgICB0aHJldyA9IHRydWU7XG4gICAgfVxuXG4gICAgYXdhaXQgZ2V0UHJvbWlzZTtcblxuICAgIGFzc2VydCghdGhyZXcsIFwiRGlkIG5vdCB0aHJvd1wiKTtcbiAgICBhc3NlcnQocmVqZWN0ZWQsIFwiUmVqZWN0ZWRcIik7XG4gIH0pO1xufSk7Il19
